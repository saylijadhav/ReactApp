{"version":3,"file":"static/js/857.9ed92b4f.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__WFop7\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__tZPT7\",\"loading\":\"NewCommentForm_loading__AYWCV\",\"control\":\"NewCommentForm_control__GD3C7\",\"actions\":\"NewCommentForm_actions__O2MYI\"};","import { useRef,useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const params=useParams();\n\n  const {sendRequest,status, error} = useHttp(addComment);\n  const {onAddedComment}=props;\n\n  useEffect(()=>{ \n    if(status==='completed' && !error ){\n      onAddedComment();\n    }\n  },[status,error,onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    const enteredText =commentTextRef.current.value;\n\n    sendRequest({commentData:{text:enteredText},quoteId:props.quoteId});\n\n\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status==='pending' && <div className='centered'> <LoadingSpinner/> </div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__LeVWO\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__FHIrM\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState,useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\nimport { useCallback } from 'react';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const params=useParams();\n\n  const {quoteId}=params;\n\n  const {sendRequest,status,data:loadedComments}=useHttp(getAllComments);\n  useEffect(()=>{\n    sendRequest(quoteId);\n  },[quoteId,sendRequest])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler=useCallback(()=>{\n    sendRequest(quoteId)\n  },[sendRequest,quoteId])\n  let comments;\n  if(status==='pending'){\n    comments=(\n      <div className='centered' >\n          <LoadingSpinner/>\n      </div>\n    )\n  }\n\n  if(status==='completed' && loadedComments && loadedComments.length>0 ){\n    comments=<CommentsList comments={loadedComments} />\n  }\n\n  if(status==='completed' && (!loadedComments || loadedComments.length===0 ) ){\n    comments=<p className='centered'>No comments were added yet !</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__C8Lev\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React,{useEffect} from \"react\";\r\nimport { useParams,Route,Link,useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetail=()=>{\r\n    const match=useRouteMatch();\r\n    const params=useParams();\r\n\r\n    const {quoteId}=params;\r\n\r\n    const {sendRequest,status,data:loadedQuote,error}=useHttp(getSingleQuote,true);\r\n    console.log(match);\r\n\r\n    useEffect(()=>{\r\n        sendRequest(quoteId);\r\n    },[sendRequest,quoteId]);\r\n\r\n    if(status==='pending'){\r\n        return(\r\n            <div className=\"centered\">\r\n                <LoadingSpinner/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(error){\r\n        return <p className=\"centered\" >{error}</p>;\r\n    }\r\n\r\n    if(!loadedQuote.text){\r\n        return <p>No Quote Found</p>\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n\r\n            <Route path={match.path} exact >\r\n                <div className=\"centered\" >\r\n                <Link className=\"btn--flat\" to={`${match.url}/comments`}>Load Comments</Link>\r\n                </div>\r\n            </Route>\r\n\r\n\r\n           \r\n\r\n            {/* <h1>All Quote Detail page</h1>\r\n            <p>{params.quoteId}</p> */}\r\n            {/*Nested params  */}\r\n            <Route path={`${match.path}/comments`} >  \r\n                <Comments/>\r\n            </Route>\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default QuoteDetail;"],"names":["props","commentTextRef","useRef","useParams","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","author","match","useRouteMatch","getSingleQuote","loadedQuote","console","log","path","exact","to","url"],"sourceRoot":""}